// <auto-generated />
using System;
using GameVerse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameVerse.Data.Migrations
{
    [DbContext(typeof(GameVerseDbContext))]
    [Migration("20241031172943_AddedPublisherIdPropertyInEvent")]
    partial class AddedPublisherIdPropertyInEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The FirstName of the ApplicationUser");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The LastName of the ApplicationUser");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("EventId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("GameId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("GamesCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event unique identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the event");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event end date and time");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The event image url");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event's publisher unique id");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasComment("The event's number of seats");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event starting date and time");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price for ticket");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The topic of the event");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventsRegistrations");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the Game added in User completed games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the game is completed");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCompleted");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in User currently playing games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCurrentlyPlaying");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in the Wishlist");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the item is added");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUserWishlists");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique indentifier.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The Date when the Game is added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The description of the Game");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image url of the game");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the Game");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublishingStudio")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The current Game's Publishing Studio");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasComment("Тhe available quantity of the game in the store");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The title of the Game.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The type of the game.");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int")
                        .HasComment("The Year on which the Game was published");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GamesGenres");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique indetifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the genre");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b807b16-64a7-4e64-9ae1-652ccd7c1f0a"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("b39ab132-e44a-4d11-843f-b2a32505eb9d"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("90d5cc95-c4fb-48c1-b4e2-3aa953660e2e"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("414c692f-37fb-43c0-be7e-d1a277351d56"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("547de739-b289-4a87-9020-f6315b7772f0"),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("c4a117f8-4e19-4980-a878-6f3cca65b7ea"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("8c9384a2-6b2f-4137-bfc0-84a97ae08bfe"),
                            Name = "First-Person Shooter"
                        },
                        new
                        {
                            Id = new Guid("33356524-feba-4ce0-a87c-019b7a2caf2d"),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("1bf91e49-0862-4ef8-b11a-5da89d6cf03e"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("8e116e58-fc30-4551-b585-e13696b04f46"),
                            Name = "Real-time strategy"
                        },
                        new
                        {
                            Id = new Guid("8d0c75e0-63d5-4ca4-82c7-ea18150d3670"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("f305e866-fc6d-4e16-aef5-f87e2c834e2d"),
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = new Guid("e21ee275-ae0e-4d78-94cc-d82ca7482e61"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("f66aa583-3dbe-481c-b78b-8ee88d5750c8"),
                            Name = "Casual"
                        },
                        new
                        {
                            Id = new Guid("09c27529-6cfd-4ca7-b6b9-e1cb00e95dca"),
                            Name = "Strategy game"
                        },
                        new
                        {
                            Id = new Guid("0007a562-b60b-42cf-ba9e-17be95be3267"),
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = new Guid("c0243796-60c0-4983-a7ff-544da357095e"),
                            Name = "Party"
                        },
                        new
                        {
                            Id = new Guid("04d1fb77-8338-417d-91a0-26d1db1be62e"),
                            Name = "Action RPG"
                        },
                        new
                        {
                            Id = new Guid("a3de9359-c327-4391-8801-e5475cc479f0"),
                            Name = "Survival"
                        },
                        new
                        {
                            Id = new Guid("1fde522c-a48d-4ef2-ab69-3ee3ca682f4f"),
                            Name = "Battle Royale"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamesPlatforms");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the platform");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ace8fa9-4275-42f7-8045-6db40c3f07b0"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("e32cf9bd-714b-4d2f-ae1b-828caeed96d9"),
                            Name = "Mac"
                        },
                        new
                        {
                            Id = new Guid("24baaed4-7fa0-4c81-b59e-d41230f00f88"),
                            Name = "PlayStation 1"
                        },
                        new
                        {
                            Id = new Guid("ffbdbcc5-d672-4476-910c-1bda93116fa0"),
                            Name = "PlayStation 2"
                        },
                        new
                        {
                            Id = new Guid("430127f1-b1f8-4eea-8282-48c79b8a460c"),
                            Name = "PlayStation 3"
                        },
                        new
                        {
                            Id = new Guid("858dc6d5-59b6-434e-b5e6-1326f94acf67"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("9af9321e-b4f5-4b40-82fe-0b29f1f6ec59"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("ba144241-dafd-4396-9733-0e181ed7f622"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("86029527-bf3b-47de-8399-856ad12da41d"),
                            Name = "Linux"
                        },
                        new
                        {
                            Id = new Guid("72ad898d-181a-40be-ae3c-70fdcbc4cd9f"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("664e4398-b866-4263-aca9-a68de7f0a593"),
                            Name = "Nintendo Wii"
                        },
                        new
                        {
                            Id = new Guid("6cebfc5e-e347-4319-bde8-ab94eef8be95"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("c77ce95b-6747-4653-8832-20c00cafbd61"),
                            Name = "Xbox 360"
                        },
                        new
                        {
                            Id = new Guid("ed3efda5-a570-4374-8a3a-b013f2e81aaa"),
                            Name = "Nintendo DS"
                        },
                        new
                        {
                            Id = new Guid("a7d0de8f-3408-4625-a524-6ffb86911a6e"),
                            Name = "Super Nintendo"
                        },
                        new
                        {
                            Id = new Guid("9317c113-3a68-4c14-827e-e471c7138f9d"),
                            Name = "PlayStation Portable"
                        },
                        new
                        {
                            Id = new Guid("2f857239-ea2b-4c69-9723-4225a434e547"),
                            Name = "PlayStation Vita"
                        },
                        new
                        {
                            Id = new Guid("55c40d4a-0e13-4585-8a4b-f618f02b8e2e"),
                            Name = "Game Boy"
                        },
                        new
                        {
                            Id = new Guid("e4bb9354-c959-4c8b-9d6c-cfe37dbe52e7"),
                            Name = "Game Boy Advanced"
                        },
                        new
                        {
                            Id = new Guid("9f2e14f7-33fe-4c9c-ad2c-b6afccec4dd8"),
                            Name = "Sega Mega Drive"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestrictionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "RestrictionId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("GamesRestrictions");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique indentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the restriction");

                    b.HasKey("Id");

                    b.ToTable("Restrictions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("844dd4bf-4ce8-4b3d-b1ff-392e05e14a9b"),
                            Name = "PEGI 3"
                        },
                        new
                        {
                            Id = new Guid("681a9d69-e435-409d-8a29-caf293f561ba"),
                            Name = "PEGI 7"
                        },
                        new
                        {
                            Id = new Guid("e859b9ef-0cb1-4b2f-9513-d50bb26d2325"),
                            Name = "PEGI 12"
                        },
                        new
                        {
                            Id = new Guid("ffc4b093-f552-4ff3-b6ea-c4e24982053b"),
                            Name = "PEGI 16 "
                        },
                        new
                        {
                            Id = new Guid("bd24a54c-d03d-4d2d-9491-9e48b1eda672"),
                            Name = "PEGI 18"
                        },
                        new
                        {
                            Id = new Guid("0c903066-8e6b-4f86-a401-9fe6c593b6b1"),
                            Name = "Bad Language"
                        },
                        new
                        {
                            Id = new Guid("d677a8bd-fa5f-4183-87e6-6f3cbc820639"),
                            Name = "Discrimination"
                        },
                        new
                        {
                            Id = new Guid("cf1e834a-332c-4796-ada0-8b6caded364e"),
                            Name = "Drugs"
                        },
                        new
                        {
                            Id = new Guid("45fdf7da-0992-49df-944f-079a908ffc72"),
                            Name = "Fear"
                        },
                        new
                        {
                            Id = new Guid("69397915-4ac8-42f2-b5f2-a9b690015d3f"),
                            Name = "Gambling"
                        },
                        new
                        {
                            Id = new Guid("d437ce2d-3e36-4191-9bd9-e3dfb04b54c5"),
                            Name = "Sex"
                        },
                        new
                        {
                            Id = new Guid("c5379622-66bf-422f-beb0-fa8f74e5d75b"),
                            Name = "Violence"
                        },
                        new
                        {
                            Id = new Guid("3bb2162e-7e52-44c2-8e8d-d26011b9e37d"),
                            Name = "In-Game Purchases"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The review unique identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The content of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the review is created");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Тhe id of the game the review is about");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The review rating");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User who wrote the review for the current game");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("GameReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany("EventsCarts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Genres.Genre", "Genre")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Platform.Platform", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Restrictions.Restriction", "Restriction")
                        .WithMany("GamesRestrictions")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Navigation("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Navigation("GamesGenres");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Navigation("GamesRestrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
