// <auto-generated />
using System;
using GameVerse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameVerse.Data.Migrations
{
    [DbContext(typeof(GameVerseDbContext))]
    [Migration("20241106165212_AddedNewPropertiesInEventsAndModeratorsTable")]
    partial class AddedNewPropertiesInEventsAndModeratorsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The FirstName of the ApplicationUser");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The LastName of the ApplicationUser");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("The User in the GameVerse system");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Moderator unique identifier");

                    b.Property<int>("TotalEventsCreated")
                        .HasColumnType("int")
                        .HasComment("Total Events created by the Moderator");

                    b.Property<int>("TotalGamesCreated")
                        .HasColumnType("int")
                        .HasComment("Total Games Created by the Moderator");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Moderators", t =>
                        {
                            t.HasComment("Moderator in GameVerse System");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("EventId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("GameId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("GamesCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event unique identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the event");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event end date and time");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The event image url");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft Delete flag");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasComment("Event location width coordinate");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasComment("Event location length coordinate");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user that bought ticket for the event");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event's publisher unique id");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasComment("The event's number of seats");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event starting date and time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event status");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price for ticket");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The topic of the event");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Events", t =>
                        {
                            t.HasComment("Gaming Event");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventsRegistrations");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the Game added in User completed games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the game is completed");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCompleted");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in User currently playing games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCurrentlyPlaying");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in the Wishlist");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the item is added");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUserWishlists");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique indentifier.");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game buyer unique identifer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The Date when the Game is added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The description of the Game");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image url of the game");

                    b.Property<Guid?>("ModeratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the Game");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game publisher unique identifier");

                    b.Property<string>("PublishingStudio")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The current Game's Publishing Studio");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasComment("Тhe available quantity of the game in the store");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The title of the Game.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The type of the game.");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int")
                        .HasComment("The Year on which the Game was published");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games", t =>
                        {
                            t.HasComment("Game to Buy");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique indentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique indentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GamesGenres", t =>
                        {
                            t.HasComment("Established many-to-many relation between Game and Genre tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique indetifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the genre");

                    b.HasKey("Id");

                    b.ToTable("Genres", t =>
                        {
                            t.HasComment("Game Genre");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e2d1395-abd4-48dc-8e4c-5b5aa155ed58"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("e0f2a6c2-5dba-488d-a297-915c17ff69ec"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("cd345083-d77b-4ced-923f-f5adce8f541c"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("55475650-bf67-444e-92e4-0d2abdbfefee"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("8850f64d-c056-4278-afe1-8be07d923b10"),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("49e9844d-3c92-4c95-a80f-658858326ef4"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("fb96842c-b839-4f67-9acd-0eb147419cd7"),
                            Name = "First-Person Shooter"
                        },
                        new
                        {
                            Id = new Guid("fc195f71-de1a-4b99-a2e0-e84fc632a204"),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("28f02ce8-f8e3-4ecc-bfcf-328382c1821b"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("d9cb0a52-5665-4b26-9b85-1d99449aaf6b"),
                            Name = "Real-time strategy"
                        },
                        new
                        {
                            Id = new Guid("ff6b2af0-c523-45c2-ac3c-8eb904aa6f2d"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("38bad3ec-7561-4671-82bd-cf97e4135ffc"),
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = new Guid("2dba9b4e-bc76-4e7f-a290-6df33811af9f"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("b317a3a4-2a11-41eb-8a94-2d9d9898c242"),
                            Name = "Casual"
                        },
                        new
                        {
                            Id = new Guid("3e341ebc-d6f0-4684-9347-04885f64424e"),
                            Name = "Strategy game"
                        },
                        new
                        {
                            Id = new Guid("0c76ce4c-1a92-462b-85f6-84e27056dfb8"),
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = new Guid("07c7c969-0cb1-4401-8266-61b59e823fed"),
                            Name = "Party"
                        },
                        new
                        {
                            Id = new Guid("738ee4fc-e51d-4149-b273-208e62819d1a"),
                            Name = "Action RPG"
                        },
                        new
                        {
                            Id = new Guid("8176981d-0fa2-461e-bff0-c0b4ae53b1cf"),
                            Name = "Survival"
                        },
                        new
                        {
                            Id = new Guid("74868dfb-1b41-4c14-b991-3c78d6ef8d58"),
                            Name = "Battle Royale"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique indentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamesPlatforms", t =>
                        {
                            t.HasComment("Established many-to-many relation between Game and Platform tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the platform");

                    b.HasKey("Id");

                    b.ToTable("Platforms", t =>
                        {
                            t.HasComment("Game Platform");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ed9e834-8aa5-4e6e-bcab-c7e87cbf7388"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("8055274a-a55f-4aa4-ac71-03a22ea2426d"),
                            Name = "Mac"
                        },
                        new
                        {
                            Id = new Guid("3f4f9e1b-6895-4f10-b4e3-45bda184f564"),
                            Name = "PlayStation 1"
                        },
                        new
                        {
                            Id = new Guid("05b5fc78-6a5d-40c2-860a-eaac51d7cc0f"),
                            Name = "PlayStation 2"
                        },
                        new
                        {
                            Id = new Guid("18377657-a5f6-4e07-9f19-a56cffa36378"),
                            Name = "PlayStation 3"
                        },
                        new
                        {
                            Id = new Guid("e04de74c-14ec-4f29-a6f4-9e010c405ec1"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("f925679c-bce2-4ae3-936f-3612803bb54c"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("87045936-9026-4768-bdf2-611932e08dca"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("a1235a8c-8a3c-43cc-8fd4-114021c9bec5"),
                            Name = "Linux"
                        },
                        new
                        {
                            Id = new Guid("da3a5de1-4fa9-4e76-8d10-d66d13c44d46"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("6ef6aa92-d2eb-4681-abd8-d86a57cd12af"),
                            Name = "Nintendo Wii"
                        },
                        new
                        {
                            Id = new Guid("df581f77-1066-4316-9786-5f17581e1f1e"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("727b83d2-b094-4b99-886e-9892baa44be7"),
                            Name = "Xbox 360"
                        },
                        new
                        {
                            Id = new Guid("1f206c07-f0a3-44a5-905e-8cef3bf0a110"),
                            Name = "Nintendo DS"
                        },
                        new
                        {
                            Id = new Guid("99e26931-da16-42a8-b2d0-f517e1aede37"),
                            Name = "Super Nintendo"
                        },
                        new
                        {
                            Id = new Guid("ae90a995-a0bf-40c3-9fbe-46e2a7a6ea46"),
                            Name = "PlayStation Portable"
                        },
                        new
                        {
                            Id = new Guid("c57c0ab7-bd22-4b89-a80e-0b458a777df9"),
                            Name = "PlayStation Vita"
                        },
                        new
                        {
                            Id = new Guid("15741f36-c8b1-406e-84c1-5d213a08a262"),
                            Name = "Game Boy"
                        },
                        new
                        {
                            Id = new Guid("62f4f067-d795-4620-8212-ef6e254d7383"),
                            Name = "Game Boy Advanced"
                        },
                        new
                        {
                            Id = new Guid("bfecbdec-44e6-4dec-9d52-0420bac3ffff"),
                            Name = "Sega Mega Drive"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier");

                    b.Property<Guid>("RestrictionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique indentifier");

                    b.HasKey("GameId", "RestrictionId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("GamesRestrictions", t =>
                        {
                            t.HasComment("Established many-to-many relation between Games and Restrictions Tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique indentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the restriction");

                    b.HasKey("Id");

                    b.ToTable("Restrictions", t =>
                        {
                            t.HasComment("Game Restriction");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("53cb12f3-62d8-4f6b-b7e7-1df03c4101af"),
                            Name = "PEGI 3"
                        },
                        new
                        {
                            Id = new Guid("cd6f7d34-06f2-4217-b1af-7ccea8cd67fc"),
                            Name = "PEGI 7"
                        },
                        new
                        {
                            Id = new Guid("9768487f-3c12-4f11-80be-0a81c7b1ecf3"),
                            Name = "PEGI 12"
                        },
                        new
                        {
                            Id = new Guid("97ccc56a-81fa-4e1f-bc65-bd9b2acb5b5a"),
                            Name = "PEGI 16 "
                        },
                        new
                        {
                            Id = new Guid("5f1ac6e7-d4e7-48d1-9142-3c9f44fa62ba"),
                            Name = "PEGI 18"
                        },
                        new
                        {
                            Id = new Guid("0c7928aa-cfe1-4eee-a930-f1d3863e39af"),
                            Name = "Bad Language"
                        },
                        new
                        {
                            Id = new Guid("538cb007-afc8-49a3-9e2e-2091ea62761b"),
                            Name = "Discrimination"
                        },
                        new
                        {
                            Id = new Guid("bec77ec2-200c-4d47-ba20-099819efef09"),
                            Name = "Drugs"
                        },
                        new
                        {
                            Id = new Guid("66f4c8a0-546b-46d2-89f4-1643b4ceead6"),
                            Name = "Fear"
                        },
                        new
                        {
                            Id = new Guid("ff355cf8-ba95-4062-8f07-b4e41cf38614"),
                            Name = "Gambling"
                        },
                        new
                        {
                            Id = new Guid("ad9fecc6-3241-4207-96a2-4d95ef0f73dd"),
                            Name = "Sex"
                        },
                        new
                        {
                            Id = new Guid("9099a73a-294f-4e77-869c-3321392fbbcd"),
                            Name = "Violence"
                        },
                        new
                        {
                            Id = new Guid("97ecfd7d-0ab2-49c7-b352-5278bddd14f6"),
                            Name = "In-Game Purchases"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The review unique identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The content of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the review is created");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Тhe id of the game the review is about");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The review rating");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User who wrote the review for the current game");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("GameReviews", t =>
                        {
                            t.HasComment("Game Review");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany("EventsCarts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.Moderator", "Publisher")
                        .WithMany("OwnedEvents")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.Moderator", null)
                        .WithMany("OwnedGames")
                        .HasForeignKey("ModeratorId");

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Genres.Genre", "Genre")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Platform.Platform", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Restrictions.Restriction", "Restriction")
                        .WithMany("GamesRestrictions")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.Navigation("OwnedEvents");

                    b.Navigation("OwnedGames");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Navigation("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Navigation("GamesGenres");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Navigation("GamesRestrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
