// <auto-generated />
using System;
using GameVerse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameVerse.Data.Migrations
{
    [DbContext(typeof(GameVerseDbContext))]
    [Migration("20241108143538_UpdatedGameTable")]
    partial class UpdatedGameTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The FirstName of the ApplicationUser");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The LastName of the ApplicationUser");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("The User in the GameVerse system");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Moderator unique identifier");

                    b.Property<int>("TotalEventsCreated")
                        .HasColumnType("int")
                        .HasComment("Total Events created by the Moderator");

                    b.Property<int>("TotalGamesCreated")
                        .HasColumnType("int")
                        .HasComment("Total Games Created by the Moderator");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Moderators", t =>
                        {
                            t.HasComment("Moderator in GameVerse System");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("EventId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("GameId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("GamesCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event unique identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the event");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event end date and time");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The event image url");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft Delete flag");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasComment("Event location width coordinate");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasComment("Event location length coordinate");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user that bought ticket for the event");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event's publisher unique id");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasComment("The event's number of seats");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event starting date and time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event status");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price for ticket");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The topic of the event");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Events", t =>
                        {
                            t.HasComment("Gaming Event");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventsRegistrations");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the Game added in User completed games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the game is completed");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCompleted");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in User currently playing games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCurrentlyPlaying");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in the Wishlist");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the item is added");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUserWishlists");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier.");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game buyer unique identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The Date when the Game is added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The description of the Game");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image url of the game");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the Game");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game publisher unique identifier");

                    b.Property<string>("PublishingStudio")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The current Game's Publishing Studio");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasComment("Тhe available quantity of the game in the store");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The title of the Game.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The type of the game.");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int")
                        .HasComment("The Year on which the Game was published");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games", t =>
                        {
                            t.HasComment("Game to Buy");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft Delete flag");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GamesGenres", t =>
                        {
                            t.HasComment("Established many-to-many relation between Game and Genre tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the genre");

                    b.HasKey("Id");

                    b.ToTable("Genres", t =>
                        {
                            t.HasComment("Game Genre");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed76c77a-e62f-435d-9155-8117d4206452"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("2b51cb10-fc8c-451f-be6d-1e1e6b5c6f6b"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("828af93b-2ddc-4aa4-a339-23515f679155"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("c3e3bab7-189c-4912-b084-489435bff10c"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("7aec9fe0-98e6-42a8-b257-c4fb27a735c9"),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("3670fd26-416b-4861-a40e-f79eaa302738"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("832224b9-4be8-4376-a97c-06be783a97d1"),
                            Name = "First-Person Shooter"
                        },
                        new
                        {
                            Id = new Guid("fd12adef-8e19-4e51-8ac2-10140f4281f0"),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("90db7c19-754b-4f3d-9995-dfd920c1867e"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("9d5dc154-7f02-4557-b41e-ac5e44e5d096"),
                            Name = "Real-time strategy"
                        },
                        new
                        {
                            Id = new Guid("cf65c644-5bba-4db3-bb3f-d4c00d641d06"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("59938758-c7fd-415a-a6c6-d29125b44905"),
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = new Guid("cfc02970-8ba2-4d6f-ab99-19930fbabbfa"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("ba3b12b3-68bf-4d16-a7d3-ee06d179eb19"),
                            Name = "Casual"
                        },
                        new
                        {
                            Id = new Guid("c4cad2e6-1163-4a0a-93ad-3eafb8477009"),
                            Name = "Strategy game"
                        },
                        new
                        {
                            Id = new Guid("a44aa10b-e88f-4228-b64d-cdaf1cd73d9f"),
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = new Guid("1f1f041c-0d3f-4129-9786-9e512ff8dd2e"),
                            Name = "Party"
                        },
                        new
                        {
                            Id = new Guid("539bdd64-0254-48ec-96a3-380fa77892fe"),
                            Name = "Action RPG"
                        },
                        new
                        {
                            Id = new Guid("b963ee5f-f9a9-4e94-8a45-062ab12f2801"),
                            Name = "Survival"
                        },
                        new
                        {
                            Id = new Guid("8ff2a777-4c7d-4e61-a12d-76fee3ae6966"),
                            Name = "Battle Royale"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamesPlatforms", t =>
                        {
                            t.HasComment("Established many-to-many relation between Game and Platform tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the platform");

                    b.HasKey("Id");

                    b.ToTable("Platforms", t =>
                        {
                            t.HasComment("Game Platform");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4fd7bcf-df43-4b8c-b37a-6801491bdac2"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("938550fd-bd98-4666-b279-e6d6bef44f60"),
                            Name = "Mac"
                        },
                        new
                        {
                            Id = new Guid("76d39400-53b2-4e1b-9efe-ab5a2cf00a55"),
                            Name = "PlayStation 1"
                        },
                        new
                        {
                            Id = new Guid("fd518716-ca99-4d3b-8096-594db826e3b1"),
                            Name = "PlayStation 2"
                        },
                        new
                        {
                            Id = new Guid("c3d8f5e0-5105-49da-adde-414d9d4d9e3e"),
                            Name = "PlayStation 3"
                        },
                        new
                        {
                            Id = new Guid("977899a9-7ce1-4f09-b6d6-fe73fc4c2466"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("2f071061-295c-4c37-964c-c419a996ec9a"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("a8a551ff-4199-4358-bfa0-420f63d4ed79"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("11a05741-9826-48f7-84b4-7a396176ffb3"),
                            Name = "Linux"
                        },
                        new
                        {
                            Id = new Guid("d1dad50b-bab9-45dd-95f0-5280f8ffb400"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("7e6ea11c-c26e-4d83-800d-8bc4d95379f0"),
                            Name = "Nintendo Wii"
                        },
                        new
                        {
                            Id = new Guid("27cbfbf6-2da9-42b4-8701-2f743752234e"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("8101f54b-80d1-4018-bf9b-182efde5d41c"),
                            Name = "Xbox 360"
                        },
                        new
                        {
                            Id = new Guid("09ba3485-57c8-447c-b9bf-c4d1f1f9c188"),
                            Name = "Nintendo DS"
                        },
                        new
                        {
                            Id = new Guid("b3df4eae-3fbc-40cd-bdf2-42df969827b7"),
                            Name = "Super Nintendo"
                        },
                        new
                        {
                            Id = new Guid("4b3ac231-0bab-4a9c-b678-1f51469f557d"),
                            Name = "PlayStation Portable"
                        },
                        new
                        {
                            Id = new Guid("5c4bbf5b-1701-49b4-8797-b1db7b15c56c"),
                            Name = "PlayStation Vita"
                        },
                        new
                        {
                            Id = new Guid("929c7be7-9bca-44d9-92cf-12f82a30c7e0"),
                            Name = "Game Boy"
                        },
                        new
                        {
                            Id = new Guid("3f62de1a-820b-41cf-8f15-8208ba3a1cfd"),
                            Name = "Game Boy Advanced"
                        },
                        new
                        {
                            Id = new Guid("b06bdb8e-16f2-46dc-8d18-0d08d064641f"),
                            Name = "Sega Mega Drive"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier");

                    b.Property<Guid>("RestrictionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.HasKey("GameId", "RestrictionId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("GamesRestrictions", t =>
                        {
                            t.HasComment("Established many-to-many relation between Games and Restrictions Tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the restriction");

                    b.HasKey("Id");

                    b.ToTable("Restrictions", t =>
                        {
                            t.HasComment("Game Restriction");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e012237-23e3-41a6-97e9-6e2c7b142c21"),
                            Name = "PEGI 3"
                        },
                        new
                        {
                            Id = new Guid("db6a6f8b-5956-4af8-aa8e-36c143e4062a"),
                            Name = "PEGI 7"
                        },
                        new
                        {
                            Id = new Guid("740c2a63-a242-4a9e-854a-08cad82a0448"),
                            Name = "PEGI 12"
                        },
                        new
                        {
                            Id = new Guid("32a79bd1-39ce-4853-bed1-cc08a42dc3d9"),
                            Name = "PEGI 16 "
                        },
                        new
                        {
                            Id = new Guid("788d61d0-70f8-41af-9354-a1ae17106946"),
                            Name = "PEGI 18"
                        },
                        new
                        {
                            Id = new Guid("c067a59b-9b60-4ed8-9bb7-055a1f54d465"),
                            Name = "Bad Language"
                        },
                        new
                        {
                            Id = new Guid("e0734304-a71f-41fe-9bfc-6349fbc0463f"),
                            Name = "Discrimination"
                        },
                        new
                        {
                            Id = new Guid("99edbf19-f8f3-4876-9e91-6d59bf2a454b"),
                            Name = "Drugs"
                        },
                        new
                        {
                            Id = new Guid("599b7a00-854b-44e3-87d6-f57cd0ed4e61"),
                            Name = "Fear"
                        },
                        new
                        {
                            Id = new Guid("7cf4eaac-52c9-4d0c-8f4b-6b9043550ed2"),
                            Name = "Gambling"
                        },
                        new
                        {
                            Id = new Guid("018a1bcc-5c98-496e-b9e9-136c66d9a5ae"),
                            Name = "Sex"
                        },
                        new
                        {
                            Id = new Guid("ecab5dd0-7609-41db-90f6-20942905cd65"),
                            Name = "Violence"
                        },
                        new
                        {
                            Id = new Guid("d5268419-cbeb-49b5-adf5-559febc2888e"),
                            Name = "In-Game Purchases"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The review unique identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The content of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the review is created");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Тhe id of the game the review is about");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The review rating");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User who wrote the review for the current game");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("GameReviews", t =>
                        {
                            t.HasComment("Game Review");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany("EventsCarts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany("GamesCarts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.Moderator", "Publisher")
                        .WithMany("OwnedEvents")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany("WishlistItems")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.Moderator", "Publisher")
                        .WithMany("OwnedGames")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Genres.Genre", "Genre")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Platform.Platform", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany("GamesRestrictions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Restrictions.Restriction", "Restriction")
                        .WithMany("GamesRestrictions")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.Navigation("OwnedEvents");

                    b.Navigation("OwnedGames");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Navigation("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.Navigation("GamesCarts");

                    b.Navigation("GamesGenres");

                    b.Navigation("GamesPlatforms");

                    b.Navigation("GamesRestrictions");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Navigation("GamesGenres");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Navigation("GamesRestrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
