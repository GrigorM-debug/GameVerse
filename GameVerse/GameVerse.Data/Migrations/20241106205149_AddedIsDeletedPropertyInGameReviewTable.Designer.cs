// <auto-generated />
using System;
using GameVerse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameVerse.Data.Migrations
{
    [DbContext(typeof(GameVerseDbContext))]
    [Migration("20241106205149_AddedIsDeletedPropertyInGameReviewTable")]
    partial class AddedIsDeletedPropertyInGameReviewTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The FirstName of the ApplicationUser");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The LastName of the ApplicationUser");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("The User in the GameVerse system");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Moderator unique identifier");

                    b.Property<int>("TotalEventsCreated")
                        .HasColumnType("int")
                        .HasComment("Total Events created by the Moderator");

                    b.Property<int>("TotalGamesCreated")
                        .HasColumnType("int")
                        .HasComment("Total Games Created by the Moderator");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Moderators", t =>
                        {
                            t.HasComment("Moderator in GameVerse System");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("EventId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("GameId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("GamesCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event unique identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the event");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event end date and time");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The event image url");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft Delete flag");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasComment("Event location width coordinate");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasComment("Event location length coordinate");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user that bought ticket for the event");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event's publisher unique id");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasComment("The event's number of seats");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event starting date and time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event status");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price for ticket");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The topic of the event");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Events", t =>
                        {
                            t.HasComment("Gaming Event");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventsRegistrations");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the Game added in User completed games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the game is completed");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCompleted");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in User currently playing games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCurrentlyPlaying");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in the Wishlist");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the item is added");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUserWishlists");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier.");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game buyer unique identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The Date when the Game is added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The description of the Game");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image url of the game");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the Game");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game publisher unique identifier");

                    b.Property<string>("PublishingStudio")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The current Game's Publishing Studio");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasComment("Тhe available quantity of the game in the store");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The title of the Game.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The type of the game.");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int")
                        .HasComment("The Year on which the Game was published");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games", t =>
                        {
                            t.HasComment("Game to Buy");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft Delete flag");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GamesGenres", t =>
                        {
                            t.HasComment("Established many-to-many relation between Game and Genre tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the genre");

                    b.HasKey("Id");

                    b.ToTable("Genres", t =>
                        {
                            t.HasComment("Game Genre");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("24ee5d63-fa9f-476f-a9c8-eb3b66faf577"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("2f01e4d4-8da9-48bd-8c0a-cc8fc2219d99"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("7e44d2ea-c861-41d6-b61b-7cce1f17f2b8"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("d76c248e-b442-4040-9b31-f874466442aa"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("f51d1840-29ec-43e6-88f2-25bc8d96b19c"),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("895c7c28-bf25-4bfa-bfe9-31a1b356583d"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("b827f242-1236-4b1e-927f-ac916fded411"),
                            Name = "First-Person Shooter"
                        },
                        new
                        {
                            Id = new Guid("2252693e-a6ee-432c-9232-43670c6fca56"),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("c06dc363-dec9-40e6-a4fd-72d45ad90a76"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("c528e4d5-51cc-4765-b31e-8b6fb8a5f667"),
                            Name = "Real-time strategy"
                        },
                        new
                        {
                            Id = new Guid("a2ee69c9-1d55-4c21-aaa6-6fec4def5bdf"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("9a6c0a96-c314-427c-b20c-03db748fe0c1"),
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = new Guid("d18cdeab-5ca6-4f03-9cf4-9cdfba32cd75"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("0a057827-ba24-4e06-8544-bbeb5379173c"),
                            Name = "Casual"
                        },
                        new
                        {
                            Id = new Guid("5ceed236-1080-4e7d-81f8-f76bb7e40a62"),
                            Name = "Strategy game"
                        },
                        new
                        {
                            Id = new Guid("9184c106-b0af-49a2-930b-3e23fd3345c2"),
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = new Guid("76788d49-1500-4072-8152-dd2ad33d503e"),
                            Name = "Party"
                        },
                        new
                        {
                            Id = new Guid("76eae1ea-182b-4256-aac1-2457accebeef"),
                            Name = "Action RPG"
                        },
                        new
                        {
                            Id = new Guid("471c81fd-eb69-4dbb-9c41-a1b507ca839d"),
                            Name = "Survival"
                        },
                        new
                        {
                            Id = new Guid("979569e6-9bd0-4f3d-8647-ba93c5cf8b85"),
                            Name = "Battle Royale"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamesPlatforms", t =>
                        {
                            t.HasComment("Established many-to-many relation between Game and Platform tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the platform");

                    b.HasKey("Id");

                    b.ToTable("Platforms", t =>
                        {
                            t.HasComment("Game Platform");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a316e9a-1fa1-4c68-89d2-445a71eb614e"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("02e63749-b83c-4bff-b97a-0bdad5664f69"),
                            Name = "Mac"
                        },
                        new
                        {
                            Id = new Guid("95c89626-93f7-4df1-b9c4-68b72b5b0121"),
                            Name = "PlayStation 1"
                        },
                        new
                        {
                            Id = new Guid("8366dbaa-7070-47d9-91eb-bb95e87e06b9"),
                            Name = "PlayStation 2"
                        },
                        new
                        {
                            Id = new Guid("b72e203f-ad1e-47a8-ba23-060216650f24"),
                            Name = "PlayStation 3"
                        },
                        new
                        {
                            Id = new Guid("f6996c27-14c3-439d-a21c-c15c1439d1dd"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("ef95d1d5-d375-48b5-ac73-1a8e35c6664d"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("a9194715-a5a9-46f0-b0aa-523c9c4a7801"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("bdbe7bda-07ef-4349-b7c8-b8f6277380dd"),
                            Name = "Linux"
                        },
                        new
                        {
                            Id = new Guid("7be082f5-52a3-4f79-a028-686fe5ad113f"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("964fcf67-baef-49c1-960c-b3d879b1563a"),
                            Name = "Nintendo Wii"
                        },
                        new
                        {
                            Id = new Guid("be850f54-3205-4256-9714-7ef8f576861f"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("622d59bc-2dad-46e7-8adc-32b1c5e7e432"),
                            Name = "Xbox 360"
                        },
                        new
                        {
                            Id = new Guid("07892f65-2ed2-4475-a9f6-f2c5928e1bd5"),
                            Name = "Nintendo DS"
                        },
                        new
                        {
                            Id = new Guid("7c645af2-3f81-403e-abd0-e00f25386657"),
                            Name = "Super Nintendo"
                        },
                        new
                        {
                            Id = new Guid("84c9a520-c11d-4aa7-a56e-303e637caa01"),
                            Name = "PlayStation Portable"
                        },
                        new
                        {
                            Id = new Guid("e345c0b8-22c9-4615-b3d1-822eead2bda8"),
                            Name = "PlayStation Vita"
                        },
                        new
                        {
                            Id = new Guid("7f03bd4d-875a-4080-887d-db8a3656fc34"),
                            Name = "Game Boy"
                        },
                        new
                        {
                            Id = new Guid("17d5ca00-c933-4d77-be1a-3afffae9beaf"),
                            Name = "Game Boy Advanced"
                        },
                        new
                        {
                            Id = new Guid("01ce70a6-c638-4774-b028-c158250c625d"),
                            Name = "Sega Mega Drive"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique identifier");

                    b.Property<Guid>("RestrictionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.HasKey("GameId", "RestrictionId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("GamesRestrictions", t =>
                        {
                            t.HasComment("Established many-to-many relation between Games and Restrictions Tables");
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the restriction");

                    b.HasKey("Id");

                    b.ToTable("Restrictions", t =>
                        {
                            t.HasComment("Game Restriction");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("b478806c-f622-4625-bb68-d581b696b8ed"),
                            Name = "PEGI 3"
                        },
                        new
                        {
                            Id = new Guid("19386f7a-327e-4912-beb9-04154e7f3f0f"),
                            Name = "PEGI 7"
                        },
                        new
                        {
                            Id = new Guid("b21b8316-cfd1-4f9c-9d93-0f8e7c2a8531"),
                            Name = "PEGI 12"
                        },
                        new
                        {
                            Id = new Guid("9480a7e7-8af7-48b2-b524-5fbdaec7811c"),
                            Name = "PEGI 16 "
                        },
                        new
                        {
                            Id = new Guid("0ad83d99-fa0f-460a-8ff5-cc8d9bfcc2fc"),
                            Name = "PEGI 18"
                        },
                        new
                        {
                            Id = new Guid("a23f81aa-f413-4e20-b9a6-8a61fcba5e56"),
                            Name = "Bad Language"
                        },
                        new
                        {
                            Id = new Guid("d9393601-0201-480c-a3d3-2d5ac62ef5ad"),
                            Name = "Discrimination"
                        },
                        new
                        {
                            Id = new Guid("631d6565-169b-43bf-a145-1af20d6c17d9"),
                            Name = "Drugs"
                        },
                        new
                        {
                            Id = new Guid("2d921dea-e168-4901-8388-8db70ea4b148"),
                            Name = "Fear"
                        },
                        new
                        {
                            Id = new Guid("3e234311-8b19-448b-9bf0-185471428b31"),
                            Name = "Gambling"
                        },
                        new
                        {
                            Id = new Guid("65d298fb-e4c5-44e0-9082-77b05c723762"),
                            Name = "Sex"
                        },
                        new
                        {
                            Id = new Guid("b43b3fc9-afc1-4c24-aaea-238904852576"),
                            Name = "Violence"
                        },
                        new
                        {
                            Id = new Guid("53f94405-7ecc-401b-bca0-f3c18d79dcd8"),
                            Name = "In-Game Purchases"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The review unique identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The content of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the review is created");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Тhe id of the game the review is about");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The review rating");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User who wrote the review for the current game");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("GameReviews", t =>
                        {
                            t.HasComment("Game Review");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany("EventsCarts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.Moderator", "Publisher")
                        .WithMany("OwnedEvents")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.Moderator", "Publisher")
                        .WithMany("OwnedGames")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Genres.Genre", "Genre")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Platform.Platform", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Restrictions.Restriction", "Restriction")
                        .WithMany("GamesRestrictions")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.Moderator", b =>
                {
                    b.Navigation("OwnedEvents");

                    b.Navigation("OwnedGames");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Navigation("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Navigation("GamesGenres");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Navigation("GamesRestrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
