// <auto-generated />
using System;
using GameVerse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameVerse.Data.Migrations
{
    [DbContext(typeof(GameVerseDbContext))]
    partial class GameVerseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The FirstName of the ApplicationUser");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasComment("The LastName of the ApplicationUser");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("EventId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("GameId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("GamesCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The event unique identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The description of the event");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event end date and time");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The event image url");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasComment("The event's number of seats");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The event starting date and time");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price for ticket");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The topic of the event");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventsRegistrations");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the Game added in User completed games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the game is completed");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCompleted");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in User currently playing games list");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesUsersCurrentlyPlaying");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the game added in the Wishlist");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the item is added");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUserWishlists");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The game unique indentifier.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The Date when the Game is added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The description of the Game");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image url of the game");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the Game");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublishingStudio")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The current Game's Publishing Studio");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasComment("Тhe available quantity of the game in the store");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("The title of the Game.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The type of the game.");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int")
                        .HasComment("The Year on which the Game was published");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GamesGenres");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The genre unique indetifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the genre");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc27424b-d957-4679-8c31-670ed540dd4e"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("5502c0eb-978c-4e2d-8bde-09fdb0a7283f"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("b352cce6-3cec-4896-8354-f98fe4799f82"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("c76b7a6d-b804-45e6-81cd-3a718cdb67e2"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("501e8e9e-4da0-4942-bc43-6de9f67ceae0"),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("4b22eeed-6a19-419a-b786-f6c30cd3a4b7"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("cf50cc02-de6d-4db4-a800-39aca6560b76"),
                            Name = "First-Person Shooter"
                        },
                        new
                        {
                            Id = new Guid("899aae4c-0144-4eeb-b56f-c204332195ea"),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("b97e41d0-038d-436a-8a0c-68330f90a71f"),
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = new Guid("b520d2c0-d551-45c5-802e-f07563164304"),
                            Name = "Real-time strategy"
                        },
                        new
                        {
                            Id = new Guid("18169f3e-41a5-4b2a-8b8c-d8274ab88cbb"),
                            Name = "Racing"
                        },
                        new
                        {
                            Id = new Guid("c3df8f83-1f64-457c-9f84-8bcf32eaf610"),
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = new Guid("9d3b8645-26fe-428e-98a9-2c64883e7eb4"),
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = new Guid("d8be7865-79a5-4f8a-8abc-38d3a76ae5f0"),
                            Name = "Casual"
                        },
                        new
                        {
                            Id = new Guid("cfcb1974-30d9-4503-b60d-d024f86ce1d3"),
                            Name = "Strategy game"
                        },
                        new
                        {
                            Id = new Guid("05184314-9326-4e65-b560-d913142f993c"),
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = new Guid("08733cf5-fc36-42ff-b616-3129d7843f88"),
                            Name = "Party"
                        },
                        new
                        {
                            Id = new Guid("52a5b04c-000f-49df-b0ce-0c3efb02beea"),
                            Name = "Action RPG"
                        },
                        new
                        {
                            Id = new Guid("e94dfb2a-ae9e-490b-8128-881d3b3e0b83"),
                            Name = "Survival"
                        },
                        new
                        {
                            Id = new Guid("dbad333f-9a28-4bfe-991c-3dfc0cb6b534"),
                            Name = "Battle Royale"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamesPlatforms");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The platform unique identifier.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the platform");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b58e1bdb-5805-4079-842d-0a07e3b531a4"),
                            Name = "PC"
                        },
                        new
                        {
                            Id = new Guid("29476c25-34d2-4f47-81b1-1c3ceb438f8f"),
                            Name = "Mac"
                        },
                        new
                        {
                            Id = new Guid("6b557837-8fc4-41e0-a122-130a903ba1fa"),
                            Name = "PlayStation 1"
                        },
                        new
                        {
                            Id = new Guid("8740ed17-58e8-4b47-be06-bf5e98d23bff"),
                            Name = "PlayStation 2"
                        },
                        new
                        {
                            Id = new Guid("39c26e96-e41b-4afb-8460-cbaed909a6fb"),
                            Name = "PlayStation 3"
                        },
                        new
                        {
                            Id = new Guid("4fada622-53fc-49a5-bc2c-69f7e84426af"),
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = new Guid("b30ea05c-3aef-495a-a7d9-d37e64ab807a"),
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = new Guid("7d454134-2891-430b-8247-7473cf759c6b"),
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = new Guid("abf64c65-8396-470c-ace2-67ab737a064b"),
                            Name = "Linux"
                        },
                        new
                        {
                            Id = new Guid("8d20be52-ee05-455f-9731-f6094109c898"),
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = new Guid("20b7df08-ff00-4996-880f-5fbaff6a1a69"),
                            Name = "Nintendo Wii"
                        },
                        new
                        {
                            Id = new Guid("ca33c75e-8cff-4305-9361-fd552c359753"),
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = new Guid("4b541bf0-1e91-471d-b39a-f5e0503675e1"),
                            Name = "Xbox 360"
                        },
                        new
                        {
                            Id = new Guid("edd9d020-4d87-41ee-8a3d-6ef07fa72564"),
                            Name = "Nintendo DS"
                        },
                        new
                        {
                            Id = new Guid("157fd96b-55fe-4fb6-a311-1b17bc9964f3"),
                            Name = "Super Nintendo"
                        },
                        new
                        {
                            Id = new Guid("2f596b18-f14b-4c03-a234-df736f81a161"),
                            Name = "PlayStation Portable"
                        },
                        new
                        {
                            Id = new Guid("728731da-b427-41a6-a810-a68dc6472a2a"),
                            Name = "PlayStation Vita"
                        },
                        new
                        {
                            Id = new Guid("69d1905b-af73-4bba-83eb-46dac99b67e3"),
                            Name = "Game Boy"
                        },
                        new
                        {
                            Id = new Guid("f3dec853-1519-4955-bfd4-235ab36512b6"),
                            Name = "Game Boy Advanced"
                        },
                        new
                        {
                            Id = new Guid("77bdff3f-4895-4bee-bc10-aeb4613a7c05"),
                            Name = "Sega Mega Drive"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestrictionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "RestrictionId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("GamesRestrictions");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The restriction unique indentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the restriction");

                    b.HasKey("Id");

                    b.ToTable("Restrictions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("159da2bb-bb22-4292-959e-6886c5620a37"),
                            Name = "PEGI 3"
                        },
                        new
                        {
                            Id = new Guid("d628949d-cf45-4dfa-b6ab-942e93b16cfb"),
                            Name = "PEGI 7"
                        },
                        new
                        {
                            Id = new Guid("41671010-9380-40a6-9809-e7c66f1abc4a"),
                            Name = "PEGI 12"
                        },
                        new
                        {
                            Id = new Guid("b3edf455-e826-4975-9764-d6fb631a9495"),
                            Name = "PEGI 16 "
                        },
                        new
                        {
                            Id = new Guid("6897caef-8f47-4a97-a4e8-1411b94f730b"),
                            Name = "PEGI 18"
                        },
                        new
                        {
                            Id = new Guid("bfb6cd24-0bf8-4d13-8c2b-1164cb712913"),
                            Name = "Bad Language"
                        },
                        new
                        {
                            Id = new Guid("6cd73919-545c-42de-b7dc-a123399b6399"),
                            Name = "Discrimination"
                        },
                        new
                        {
                            Id = new Guid("7d7df725-5f5c-4d7b-b8ce-949f3cf78dac"),
                            Name = "Drugs"
                        },
                        new
                        {
                            Id = new Guid("b288ad6f-f214-48ab-b9cc-4e1ffea813e7"),
                            Name = "Fear"
                        },
                        new
                        {
                            Id = new Guid("5d7c69ac-d3d7-45d4-833f-d376a04da097"),
                            Name = "Gambling"
                        },
                        new
                        {
                            Id = new Guid("b1021c5d-ec10-4728-8108-42d8708d84d8"),
                            Name = "Sex"
                        },
                        new
                        {
                            Id = new Guid("b369ecea-0e58-44a0-9275-392d951f7c9e"),
                            Name = "Violence"
                        },
                        new
                        {
                            Id = new Guid("8fb3bd43-d3e8-4be8-b4b6-c657e992cbd1"),
                            Name = "In-Game Purchases"
                        });
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The review unique identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The content of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time when the review is created");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Тhe id of the game the review is about");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("The review rating");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the User who wrote the review for the current game");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("GameReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.Cart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.EventCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany("EventsCarts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Carts.GameCart", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Carts.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.EventRegistration", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCompleted", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserCurrentlyPlaying", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.GameUserActions.GameUserWishlist", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Game", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.GameGenre", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Genres.Genre", "Genre")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.GamePlatform", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Platform.Platform", "Platform")
                        .WithMany("GamesPlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.GameRestriction", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.Games.Restrictions.Restriction", "Restriction")
                        .WithMany("GamesRestrictions")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Review.GameReview", b =>
                {
                    b.HasOne("GameVerse.Data.Models.Games.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GameVerse.Data.Models.ApplicationUsers.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameVerse.Data.Models.Events.Event", b =>
                {
                    b.Navigation("EventsCarts");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Genres.Genre", b =>
                {
                    b.Navigation("GamesGenres");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Platform.Platform", b =>
                {
                    b.Navigation("GamesPlatforms");
                });

            modelBuilder.Entity("GameVerse.Data.Models.Games.Restrictions.Restriction", b =>
                {
                    b.Navigation("GamesRestrictions");
                });
#pragma warning restore 612, 618
        }
    }
}
